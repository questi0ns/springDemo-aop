<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                                 http://www.springframework.org/schema/beans/spring-beans.xsd
                                  http://www.springframework.org/schema/aop
                                    http://www.springframework.org/schema/aop/spring-aop.xsd
         ">

    <bean id="car" class="com.qs.spring_aop_demo.Car" />
    <bean id="logger" class="com.qs.spring_aop_demo.CarLogger" />


    <!-- 配置织入 -->
    <aop:config>

        <!--  配置切点  -->
        <aop:pointcut expression="execution(* com.qs.spring_aop_demo.Car.go(..))" id="go"/>


        <!-- 配置切面  ref属性:指定哪个对象是通知对象-->
        <aop:aspect ref="logger">
            <!--    method:指定通知类中哪个方法为通知方法
                    pointcut-ref:指定切点表达式        -->
            <!-- 前置切面 -->
            <aop:before pointcut-ref="go" method="beforeRun" />

            <!-- 后置切面 -->
            <aop:after pointcut-ref="go" method="afterRun" />

            <!-- 除了前置、后置之外，还有环绕around，异常afterThrowing等等····
             Before——在方法被调用之前调用通知
             After——在方法完成之后调用通知，无论方法是否执行成功
             After-returning——在方法成功执行之后调用通知
             After-throwing——在方法抛出异常后调用通知
             Around——通知包裹了被通知的方法，在被通知的方法调用之前和调用之后都执行自定义的行为
             -->
        </aop:aspect>
    </aop:config>
</beans>